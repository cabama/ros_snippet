{
	"scope": "source.c, source.cpp, source.c++",
	"completions":
	[
		{"trigger": "adjacent_find\tfunc", "contents": "adjacent_find($1)"},
		{"trigger": "advance\tfunc", "contents": "advance($1)"},
		{"trigger": "all_of\tfunc", "contents": "all_of($1)"},
		{"trigger": "any_of\tfunc", "contents": "any_of($1)"},
		{"trigger": "assign\tfunc", "contents": "assign($1)"},
		{"trigger": "at\tfunc", "contents": "at($1)"},
		{"trigger": "back\tfunc", "contents": "back($1)"},
		{"trigger": "back_inserter\tfunc", "contents": "back_inserter($1)"},
		{"trigger": "before_begin\tfunc", "contents": "before_begin($1)"},
		{"trigger": "begin\tfunc", "contents": "begin($1)"},
		{"trigger": "binary_search\tfunc", "contents": "binary_search($1)"},
		{"trigger": "bucket\tfunc", "contents": "bucket($1)"},
		{"trigger": "bucket_count\tfunc", "contents": "bucket_count($1)"},
		{"trigger": "bucket_size\tfunc", "contents": "bucket_size($1)"},
		{"trigger": "capacity\tfunc", "contents": "capacity($1)"},
		{"trigger": "cbefore_begin\tfunc", "contents": "cbefore_begin($1)"},
		{"trigger": "cbegin\tfunc", "contents": "cbegin($1)"},
		{"trigger": "cend\tfunc", "contents": "cend($1)"},
		{"trigger": "clear\tfunc", "contents": "clear($1)"},
		{"trigger": "close\tfunc", "contents": "close($1)"},
		{"trigger": "copy\tfunc", "contents": "copy($1)"},
		{"trigger": "copy_backward\tfunc", "contents": "copy_backward($1)"},
		{"trigger": "copy_if\tfunc", "contents": "copy_if($1)"},
		{"trigger": "copy_n\tfunc", "contents": "copy_n($1)"},
		{"trigger": "count\tfunc", "contents": "count($1)"},
		{"trigger": "count_if\tfunc", "contents": "count_if($1)"},
		{"trigger": "crbegin\tfunc", "contents": "crbegin($1)"},
		{"trigger": "crend\tfunc", "contents": "crend($1)"},
		{"trigger": "data\tfunc", "contents": "data($1)"},
		{"trigger": "distance\tfunc", "contents": "distance($1)"},
		{"trigger": "emplace\tfunc", "contents": "emplace($1)"},
		{"trigger": "emplace_after\tfunc", "contents": "emplace_after($1)"},
		{"trigger": "emplace_back\tfunc", "contents": "emplace_back($1)"},
		{"trigger": "emplace_front\tfunc", "contents": "emplace_front($1)"},
		{"trigger": "emplace_hint\tfunc", "contents": "emplace_hint($1)"},
		{"trigger": "empty\tfunc", "contents": "empty($1)"},
		{"trigger": "end\tfunc", "contents": "end($1)"},
		{"trigger": "equal\tfunc", "contents": "equal($1)"},
		{"trigger": "equal_range\tfunc", "contents": "equal_range($1)"},
		{"trigger": "erase\tfunc", "contents": "erase($1)"},
		{"trigger": "erase_after\tfunc", "contents": "erase_after($1)"},
		{"trigger": "fill\tfunc", "contents": "fill($1)"},
		{"trigger": "fill_n\tfunc", "contents": "fill_n($1)"},
		{"trigger": "find\tfunc", "contents": "find($1)"},
		{"trigger": "find_end\tfunc", "contents": "find_end($1)"},
		{"trigger": "find_first_of\tfunc", "contents": "find_first_of($1)"},
		{"trigger": "find_if\tfunc", "contents": "find_if($1)"},
		{"trigger": "find_if_not\tfunc", "contents": "find_if_not($1)"},
		{"trigger": "for_each\tfunc", "contents": "for_each($1)"},
		{"trigger": "front\tfunc", "contents": "front($1)"},
		{"trigger": "front_inserter\tfunc", "contents": "front_inserter($1)"},
		{"trigger": "generate\tfunc", "contents": "generate($1)"},
		{"trigger": "generate_n\tfunc", "contents": "generate_n($1)"},
		{"trigger": "get_allocator\tfunc", "contents": "get_allocator($1)"},
		{"trigger": "hash_function\tfunc", "contents": "hash_function($1)"},
		{"trigger": "includes\tfunc", "contents": "includes($1)"},
		{"trigger": "inplace_merge\tfunc", "contents": "inplace_merge($1)"},
		{"trigger": "insert\tfunc", "contents": "insert($1)"},
		{"trigger": "insert_after\tfunc", "contents": "insert_after($1)"},
		{"trigger": "inserter\tfunc", "contents": "inserter($1)"},
		{"trigger": "is_heap\tfunc", "contents": "is_heap($1)"},
		{"trigger": "is_heap_until\tfunc", "contents": "is_heap_until($1)"},
		{"trigger": "is_open\tfunc", "contents": "is_open($1)"},
		{"trigger": "is_partitioned\tfunc", "contents": "is_partitioned($1)"},
		{"trigger": "is_permutation\tfunc", "contents": "is_permutation($1)"},
		{"trigger": "is_sorted\tfunc", "contents": "is_sorted($1)"},
		{"trigger": "is_sorted_until\tfunc", "contents": "is_sorted_until($1)"},
		{"trigger": "iter_swap\tfunc", "contents": "iter_swap($1)"},
		{"trigger": "key_comp\tfunc", "contents": "key_comp($1)"},
		{"trigger": "key_eq\tfunc", "contents": "key_eq($1)"},
		{"trigger": "lexicographical_compare\tfunc", "contents": "lexicographical_compare($1)"},
		{"trigger": "load_factor\tfunc", "contents": "load_factor($1)"},
		{"trigger": "lower_bound\tfunc", "contents": "lower_bound($1)"},
		{"trigger": "make_heap\tfunc", "contents": "make_heap($1)"},
		{"trigger": "make_move_iterator\tfunc", "contents": "make_move_iterator($1)"},
		{"trigger": "max\tfunc", "contents": "max($1)"},
		{"trigger": "max_bucket_count\tfunc", "contents": "max_bucket_count($1)"},
		{"trigger": "max_element\tfunc", "contents": "max_element($1)"},
		{"trigger": "max_load_factor\tfunc", "contents": "max_load_factor($1)"},
		{"trigger": "max_size\tfunc", "contents": "max_size($1)"},
		{"trigger": "merge\tfunc", "contents": "merge($1)"},
		{"trigger": "min\tfunc", "contents": "min($1)"},
		{"trigger": "min_element\tfunc", "contents": "min_element($1)"},
		{"trigger": "minmax\tfunc", "contents": "minmax($1)"},
		{"trigger": "minmax_element\tfunc", "contents": "minmax_element($1)"},
		{"trigger": "mismatch\tfunc", "contents": "mismatch($1)"},
		{"trigger": "move\tfunc", "contents": "move($1)"},
		{"trigger": "move_backward\tfunc", "contents": "move_backward($1)"},
		{"trigger": "next\tfunc", "contents": "next($1)"},
		{"trigger": "next_permutation\tfunc", "contents": "next_permutation($1)"},
		{"trigger": "none_of\tfunc", "contents": "none_of($1)"},
		{"trigger": "nth_element\tfunc", "contents": "nth_element($1)"},
		{"trigger": "open\tfunc", "contents": "open($1)"},
		{"trigger": "operator\tfunc", "contents": "operator($1)"},
		{"trigger": "operator=\tfunc", "contents": "operator=($1)"},
		{"trigger": "operator[]\tfunc", "contents": "operator[]($1)"},
		{"trigger": "partial_sort\tfunc", "contents": "partial_sort($1)"},
		{"trigger": "partial_sort_copy\tfunc", "contents": "partial_sort_copy($1)"},
		{"trigger": "partition\tfunc", "contents": "partition($1)"},
		{"trigger": "partition_copy\tfunc", "contents": "partition_copy($1)"},
		{"trigger": "partition_point\tfunc", "contents": "partition_point($1)"},
		{"trigger": "pop\tfunc", "contents": "pop($1)"},
		{"trigger": "pop_back\tfunc", "contents": "pop_back($1)"},
		{"trigger": "pop_front\tfunc", "contents": "pop_front($1)"},
		{"trigger": "pop_heap\tfunc", "contents": "pop_heap($1)"},
		{"trigger": "prev\tfunc", "contents": "prev($1)"},
		{"trigger": "prev_permutation\tfunc", "contents": "prev_permutation($1)"},
		{"trigger": "push\tfunc", "contents": "push($1)"},
		{"trigger": "push_back\tfunc", "contents": "push_back($1)"},
		{"trigger": "push_front\tfunc", "contents": "push_front($1)"},
		{"trigger": "push_heap\tfunc", "contents": "push_heap($1)"},
		{"trigger": "random_shuffle\tfunc", "contents": "random_shuffle($1)"},
		{"trigger": "rbegin\tfunc", "contents": "rbegin($1)"},
		{"trigger": "regex_match\tfunc", "contents": "regex_match($1)"},
		{"trigger": "regex_replace\tfunc", "contents": "regex_replace($1)"},
		{"trigger": "regex_search\tfunc", "contents": "regex_search($1)"},
		{"trigger": "rehash\tfunc", "contents": "rehash($1)"},
		{"trigger": "remove\tfunc", "contents": "remove($1)"},
		{"trigger": "remove_copy\tfunc", "contents": "remove_copy($1)"},
		{"trigger": "remove_copy_if\tfunc", "contents": "remove_copy_if($1)"},
		{"trigger": "remove_if\tfunc", "contents": "remove_if($1)"},
		{"trigger": "rend\tfunc", "contents": "rend($1)"},
		{"trigger": "replace\tfunc", "contents": "replace($1)"},
		{"trigger": "replace_copy\tfunc", "contents": "replace_copy($1)"},
		{"trigger": "replace_copy_if\tfunc", "contents": "replace_copy_if($1)"},
		{"trigger": "replace_if\tfunc", "contents": "replace_if($1)"},
		{"trigger": "reserve\tfunc", "contents": "reserve($1)"},
		{"trigger": "resize\tfunc", "contents": "resize($1)"},
		{"trigger": "reverse\tfunc", "contents": "reverse($1)"},
		{"trigger": "reverse_copy\tfunc", "contents": "reverse_copy($1)"},
		{"trigger": "rotate\tfunc", "contents": "rotate($1)"},
		{"trigger": "rotate_copy\tfunc", "contents": "rotate_copy($1)"},
		{"trigger": "search\tfunc", "contents": "search($1)"},
		{"trigger": "search_n\tfunc", "contents": "search_n($1)"},
		{"trigger": "set_difference\tfunc", "contents": "set_difference($1)"},
		{"trigger": "set_intersection\tfunc", "contents": "set_intersection($1)"},
		{"trigger": "set_symmetric_difference\tfunc", "contents": "set_symmetric_difference($1)"},
		{"trigger": "set_union\tfunc", "contents": "set_union($1)"},
		{"trigger": "shrink_to_fit\tfunc", "contents": "shrink_to_fit($1)"},
		{"trigger": "shuffle\tfunc", "contents": "shuffle($1)"},
		{"trigger": "size\tfunc", "contents": "size($1)"},
		{"trigger": "sort\tfunc", "contents": "sort($1)"},
		{"trigger": "sort_heap\tfunc", "contents": "sort_heap($1)"},
		{"trigger": "splice\tfunc", "contents": "splice($1)"},
		{"trigger": "splice_after\tfunc", "contents": "splice_after($1)"},
		{"trigger": "stable_partition\tfunc", "contents": "stable_partition($1)"},
		{"trigger": "stable_sort\tfunc", "contents": "stable_sort($1)"},
		{"trigger": "swap\tfunc", "contents": "swap($1)"},
		{"trigger": "swap_ranges\tfunc", "contents": "swap_ranges($1)"},
		{"trigger": "top\tfunc", "contents": "top($1)"},
		{"trigger": "transform\tfunc", "contents": "transform($1)"},
		{"trigger": "unique\tfunc", "contents": "unique($1)"},
		{"trigger": "unique_copy\tfunc", "contents": "unique_copy($1)"},
		{"trigger": "upper_bound\tfunc", "contents": "upper_bound($1)"},
		{"trigger": "value_comp\tfunc", "contents": "value_comp($1)"},
	]
}